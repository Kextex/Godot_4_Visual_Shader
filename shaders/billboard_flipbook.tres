[gd_resource type="VisualShader" load_steps=6 format=3 uid="uid://b21i33lcshyam"]

[ext_resource type="Script" path="res://addons/vs_plugin/utility/flipbook.gd" id="1_ys5y5"]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_qcb4k"]
parameter_name = "TexFlipbook"
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_2cl8b"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeBillboard" id="VisualShaderNodeBillboard_j2qpc"]
keep_scale = true

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_jv446"]
default_input_values = [1, 0.4]
initialized = true
script = ExtResource("1_ys5y5")

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D TexFlipbook : source_color;


// Flipbook
// render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert, specular_schlick_ggx;

uniform bool _invert_x = false;
uniform bool _invert_y = false;

uniform bool _limit_frames = false;
uniform float _max_frames = 0.0;

uniform bool _anim_loop = false;
uniform bool _particle_anim = true;

uniform int _number_of_columns = 3;
uniform int _number_of_rows = 3;
// uniform sampler2D flipbookTex : source_color;

void fLiPBook(vec2 _i_uv, float _playback_rate, float _instan_custom_z, float _time, out vec2 _result_uv) {
	float total_frames = float(_number_of_columns * _number_of_rows);
	float h_frames = float(_number_of_columns);
	float v_frames = float(_number_of_rows);
	float current_frame;

	if (_particle_anim) {
		current_frame = floor(_instan_custom_z * total_frames);
	} else {
		current_frame = floor(_playback_rate * _time * total_frames);
	}

	if (!_limit_frames) {
		if (!_anim_loop) {
			// Clamp the frame within the valid frame range
			current_frame = clamp(current_frame, 0.0, total_frames - 1.0);
		} else {
			// Use modulo to wrap the frame within the range
			current_frame = mod(current_frame, total_frames);
		}
	} else {
		if (!_anim_loop) {
			current_frame = clamp(current_frame, 0.0, _max_frames - 1.0);
		} else {
			current_frame = mod(current_frame, _max_frames);
		}
	}

	if (_invert_x) {
		_i_uv.x = 1.0 - _i_uv.x;
	}
	if (_invert_y) {
		_i_uv.y = 1.0 - _i_uv.y;
	}

	// Scale down the base UV coordinates based on the number of columns and rows
	_i_uv /= vec2(h_frames, v_frames);
	
	// Adjusts the UV coordinates based on the current frame position in the flipbook texture
	_i_uv += vec2(mod(current_frame, h_frames) / h_frames, floor((current_frame + 0.5) / h_frames) / v_frames);

	_result_uv = _i_uv;
}

//  void fragment() {
//  	ALBEDO = textureLod(flipbookTex, fLiPBook(UV, TIME), 0).xyz ;
//  }


void vertex() {
	vec2 n_out3p0;
// Flipbook:3
	float n_in3p1 = 0.40000;
	{
		fLiPBook(UV, n_in3p1, INSTANCE_CUSTOM.z, TIME, n_out3p0);
	}


	mat4 n_out2p0;
// GetBillboardMatrix:2
	{
		mat4 __mvm = VIEW_MATRIX * mat4(INV_VIEW_MATRIX[0], INV_VIEW_MATRIX[1], INV_VIEW_MATRIX[2], MODEL_MATRIX[3]);
		__mvm = __mvm * mat4(vec4(length(MODEL_MATRIX[0].xyz), 0.0, 0.0, 0.0), vec4(0.0, length(MODEL_MATRIX[1].xyz), 0.0, 0.0), vec4(0.0, 0.0, length(MODEL_MATRIX[2].xyz), 0.0), vec4(0.0, 0.0, 0.0, 1.0));
		n_out2p0 = __mvm;
	}


// Output:0
	UV = n_out3p0;
	MODELVIEW_MATRIX = n_out2p0;


}

void fragment() {
	vec4 n_out4p0;
// Texture2D:4
	n_out4p0 = texture(TexFlipbook, UV);
	float n_out4p4 = n_out4p0.a;


// Output:0
	ALBEDO = vec3(n_out4p0.xyz);
	ALPHA = n_out4p4;


}
"
graph_offset = Vector2(-952.182, 21.3796)
nodes/vertex/2/node = SubResource("VisualShaderNodeBillboard_j2qpc")
nodes/vertex/2/position = Vector2(-160, 440)
nodes/vertex/3/node = SubResource("VisualShaderNodeCustom_jv446")
nodes/vertex/3/position = Vector2(-60, 200)
nodes/vertex/connections = PackedInt32Array(2, 0, 0, 10, 3, 0, 0, 4)
nodes/fragment/0/position = Vector2(320, 320)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture2DParameter_qcb4k")
nodes/fragment/3/position = Vector2(-1120, 260)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_2cl8b")
nodes/fragment/4/position = Vector2(-300, 220)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 2, 4, 0, 0, 0, 4, 4, 0, 1)
