[gd_resource type="VisualShader" load_steps=23 format=3 uid="uid://77e5aydepnnk"]

[ext_resource type="Script" path="res://addons/vs_plugin/3d/deep_parallax.gd" id="1_10jtx"]

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_8ig1c"]
default_input_values = [0, false, 1, 1.0, 2, 0.8]

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_ftect"]
parameter_name = "EnableRoughnessTex"
default_value_enabled = true
default_value = true

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_7gj4v"]
parameter_name = "TexASMR"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_itdxc"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_8yxjq"]
parameter_name = "TexAlbedoTex"
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_t761w"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_dgql5"]
parameter_name = "TexNormal"
texture_type = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_w5g6q"]
parameter_name = "NormalMapDepth"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_11lq6"]
parameter_name = "TexHeight"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_xxfun"]
parameter_name = "AO_LightAffect"
hint = 1
max = 20.0
default_value_enabled = true

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_k8g77"]
parameter_name = "Roughness"
hint = 1
default_value_enabled = true
default_value = 0.8

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_jjdea"]
parameter_name = "Metallic"
hint = 1
default_value_enabled = true

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_hvhio"]
parameter_name = "Specular"
hint = 1
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_3mtbx"]
default_input_values = [3, 8, 4, 32, 5, Vector2(1, 1)]
initialized = true
script = ExtResource("1_10jtx")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_lvl8w"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_4a7bt"]
default_input_values = [0, false, 1, 1.0, 2, 1.0]

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_fucev"]
parameter_name = "EnableAOTex"
default_value_enabled = true

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_o5vdo"]
parameter_name = "EnableSpecularTex"
default_value_enabled = true

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_yhvip"]
default_input_values = [0, false, 1, 1.0, 2, 0.5]

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_axcxs"]

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_scnft"]
parameter_name = "EnableMetallicTex"
default_value_enabled = true

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D TexHeight;
uniform sampler2D TexAlbedoTex : source_color;
uniform bool EnableMetallicTex = false;
uniform sampler2D TexASMR;
uniform float Metallic : hint_range(0, 1) = 0;
uniform bool EnableRoughnessTex = true;
uniform float Roughness : hint_range(0, 1) = 0.80000001192093;
uniform bool EnableSpecularTex = false;
uniform float Specular : hint_range(0, 1) = 0.5;
uniform bool EnableAOTex = false;
uniform float AO_LightAffect : hint_range(0, 20) = 0;
uniform sampler2D TexNormal : hint_normal;
uniform float NormalMapDepth = 1;


// DeepParallax
//uniform sampler2D texture_parallax_default: hint_default_black;
uniform float heightmap_scale: hint_range(0.0, 20.0, 0.01) = 5;
uniform vec2 _depth_flip = vec2(1.0, 1.0);
uniform bool flip_heightmap = false;
//uniform sampler2D texture_albedo: source_color;

// Perform deep parallax mapping
void deep_parallax(in vec2 _uv_in, in sampler2D _texture_heightmap, in float depth_scale, in int _min_layers, in int _max_layers, in vec3 vertex, in vec3 normal, in vec3 tangent, in vec3 binormal, in vec3 eyeoffset, out vec2 uv_out) {
	vec3 view_dir = normalize(normalize(-vertex + eyeoffset) * mat3(tangent * _depth_flip.x, -binormal * _depth_flip.y, normal));
	float num_layers = mix(float(_max_layers),float(_min_layers), abs(dot(vec3(0.0, 0.0, 1.0), view_dir)));
	float layer_depth = 1.0 / num_layers;
	float current_layer_depth = 0.0;
	vec2 P = view_dir.xy * heightmap_scale * 0.01;
	vec2 delta = P / num_layers;
	vec2 ofs = _uv_in;
	float depth;
	
	if (!flip_heightmap) {
		depth = 1.0 - texture(_texture_heightmap, ofs).r;
	} else {
		depth = texture(_texture_heightmap, ofs).r;
	}
	
	float current_depth = 0.0;
	while(current_depth < depth) {
		ofs -= delta;
		if (!flip_heightmap) {
			depth = 1.0 - texture(_texture_heightmap, ofs).r;
		} else {
			depth = texture(_texture_heightmap, ofs).r;
		}
		current_depth += layer_depth;
	}
	vec2 prev_ofs = ofs + delta;
	float after_depth  = depth - current_depth;
	
	float before_depth;
	if (!flip_heightmap) {
		before_depth = ( 1.0 - texture(_texture_heightmap, prev_ofs).r  ) - current_depth + layer_depth;
	} else {
		before_depth = texture(_texture_heightmap, prev_ofs).r - current_depth + layer_depth;
	}
	
	float weight = after_depth / (after_depth - before_depth);
	ofs = mix(ofs,prev_ofs,weight);
	uv_out=ofs;
}

//void fragment() {
    //vec2 corrected_uv;
    //deep_parallax(UV, texture_parallax_default, heightmap_scale, 8, 32, VERTEX, NORMAL, TANGENT, BINORMAL, EYE_OFFSET, corrected_uv);
    //ALBEDO = texture(texture_albedo, corrected_uv).rgb;
//}

void fragment() {
	vec2 n_out28p0;
// DeepParallax:28
	int n_in28p3 = 8;
	int n_in28p4 = 32;
	vec2 n_in28p5 = vec2(1.00000, 1.00000);
	{
		deep_parallax(UV, TexHeight, heightmap_scale, n_in28p3, n_in28p4, VERTEX, NORMAL, TANGENT, BINORMAL, EYE_OFFSET, n_out28p0);
	}


	vec4 n_out13p0;
// Texture2D:13
	n_out13p0 = texture(TexAlbedoTex, n_out28p0);


// BooleanParameter:9
	bool n_out9p0 = EnableMetallicTex;


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TexASMR, n_out28p0);
	float n_out3p1 = n_out3p0.r;
	float n_out3p2 = n_out3p0.g;
	float n_out3p3 = n_out3p0.b;
	float n_out3p4 = n_out3p0.a;


// FloatParameter:23
	float n_out23p0 = Metallic;


	float n_out8p0;
// Switch:8
	n_out8p0 = mix(n_out23p0, n_out3p3, float(n_out9p0));


// BooleanParameter:11
	bool n_out11p0 = EnableRoughnessTex;


// FloatParameter:21
	float n_out21p0 = Roughness;


	float n_out10p0;
// Switch:10
	n_out10p0 = mix(n_out21p0, n_out3p4, float(n_out11p0));


// BooleanParameter:6
	bool n_out6p0 = EnableSpecularTex;


// FloatParameter:24
	float n_out24p0 = Specular;


	float n_out7p0;
// Switch:7
	n_out7p0 = mix(n_out24p0, n_out3p2, float(n_out6p0));


// BooleanParameter:5
	bool n_out5p0 = EnableAOTex;


	float n_out4p0;
// Switch:4
	float n_in4p2 = 1.00000;
	n_out4p0 = mix(n_in4p2, n_out3p1, float(n_out5p0));


// FloatParameter:20
	float n_out20p0 = AO_LightAffect;


	vec4 n_out15p0;
// Texture2D:15
	n_out15p0 = texture(TexNormal, n_out28p0);


// FloatParameter:17
	float n_out17p0 = NormalMapDepth;


// Output:0
	ALBEDO = vec3(n_out13p0.xyz);
	METALLIC = n_out8p0;
	ROUGHNESS = n_out10p0;
	SPECULAR = n_out7p0;
	AO = n_out4p0;
	AO_LIGHT_AFFECT = n_out20p0;
	NORMAL_MAP = vec3(n_out15p0.xyz);
	NORMAL_MAP_DEPTH = n_out17p0;


}
"
modes/cull = 2
nodes/fragment/0/position = Vector2(9780, 1480)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_lvl8w")
nodes/fragment/3/position = Vector2(8200, 2320)
nodes/fragment/4/node = SubResource("VisualShaderNodeSwitch_4a7bt")
nodes/fragment/4/position = Vector2(9000, 1420)
nodes/fragment/5/node = SubResource("VisualShaderNodeBooleanParameter_fucev")
nodes/fragment/5/position = Vector2(8200, 1260)
nodes/fragment/6/node = SubResource("VisualShaderNodeBooleanParameter_o5vdo")
nodes/fragment/6/position = Vector2(8200, 1520)
nodes/fragment/7/node = SubResource("VisualShaderNodeSwitch_yhvip")
nodes/fragment/7/position = Vector2(9000, 1700)
nodes/fragment/8/node = SubResource("VisualShaderNodeSwitch_axcxs")
nodes/fragment/8/position = Vector2(9020, 1960)
nodes/fragment/9/node = SubResource("VisualShaderNodeBooleanParameter_scnft")
nodes/fragment/9/position = Vector2(8200, 1760)
nodes/fragment/10/node = SubResource("VisualShaderNodeSwitch_8ig1c")
nodes/fragment/10/position = Vector2(9020, 2220)
nodes/fragment/11/node = SubResource("VisualShaderNodeBooleanParameter_ftect")
nodes/fragment/11/position = Vector2(8200, 2020)
nodes/fragment/12/node = SubResource("VisualShaderNodeTexture2DParameter_7gj4v")
nodes/fragment/12/position = Vector2(7600, 2160)
nodes/fragment/13/node = SubResource("VisualShaderNodeTexture_itdxc")
nodes/fragment/13/position = Vector2(8940, 1040)
nodes/fragment/14/node = SubResource("VisualShaderNodeTexture2DParameter_8yxjq")
nodes/fragment/14/position = Vector2(8380, 660)
nodes/fragment/15/node = SubResource("VisualShaderNodeTexture_t761w")
nodes/fragment/15/position = Vector2(9000, 2780)
nodes/fragment/16/node = SubResource("VisualShaderNodeTexture2DParameter_dgql5")
nodes/fragment/16/position = Vector2(8500, 2780)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatParameter_w5g6q")
nodes/fragment/17/position = Vector2(8980, 3080)
nodes/fragment/18/node = SubResource("VisualShaderNodeTexture2DParameter_11lq6")
nodes/fragment/18/position = Vector2(6780, 1420)
nodes/fragment/20/node = SubResource("VisualShaderNodeFloatParameter_xxfun")
nodes/fragment/20/position = Vector2(8920, 460)
nodes/fragment/21/node = SubResource("VisualShaderNodeFloatParameter_k8g77")
nodes/fragment/21/position = Vector2(7980, 2660)
nodes/fragment/23/node = SubResource("VisualShaderNodeFloatParameter_jjdea")
nodes/fragment/23/position = Vector2(7660, 1660)
nodes/fragment/24/node = SubResource("VisualShaderNodeFloatParameter_hvhio")
nodes/fragment/24/position = Vector2(7500, 1180)
nodes/fragment/28/node = SubResource("VisualShaderNodeCustom_3mtbx")
nodes/fragment/28/position = Vector2(7403.24, 1828.52)
nodes/fragment/connections = PackedInt32Array(4, 0, 0, 6, 3, 1, 4, 1, 5, 0, 4, 0, 3, 2, 7, 1, 6, 0, 7, 0, 7, 0, 0, 4, 9, 0, 8, 0, 8, 0, 0, 2, 3, 3, 8, 1, 11, 0, 10, 0, 3, 4, 10, 1, 12, 0, 3, 2, 14, 0, 13, 2, 13, 0, 0, 0, 16, 0, 15, 2, 15, 0, 0, 9, 17, 0, 0, 10, 10, 0, 0, 3, 20, 0, 0, 7, 21, 0, 10, 2, 23, 0, 8, 2, 24, 0, 7, 2, 18, 0, 28, 1, 28, 0, 13, 0, 28, 0, 3, 0, 28, 0, 15, 0)
